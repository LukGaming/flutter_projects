// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'infrastructure/entities/message_entity.dart';
import 'infrastructure/entities/message_file_entity.dart';
import 'infrastructure/entities/user_chat_messages_entity.dart';
import 'infrastructure/entities/user_entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 5105723551177742776),
      name: 'MessageEntity',
      lastPropertyId: const obx_int.IdUid(8, 2255836969165309841),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2162967265791506512),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8434176561336891224),
            name: 'sendToUserId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7415871747408015527),
            name: 'sendFromUserId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2969915044552207899),
            name: 'bodyText',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 205571134376105796),
            name: 'cratedAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2024196239746942964),
            name: 'isSent',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 8543442749714650151),
            name: 'received',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 2255836969165309841),
            name: 'seen',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(1, 8655038270554466679),
            name: 'messageFiles',
            targetId: const obx_int.IdUid(2, 2609461332105018288))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 2609461332105018288),
      name: 'MessageFileEntity',
      lastPropertyId: const obx_int.IdUid(6, 4895098184983414293),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7902520714246596995),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6702557496330440045),
            name: 'serverSrc',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6705534825544678613),
            name: 'downloadedToLocalStorage',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7387847565092783794),
            name: 'localStoragePath',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2241156219489643846),
            name: 'messageId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 4895098184983414293),
            name: 'sentToServer',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 3989306209226767090),
      name: 'UserEntity',
      lastPropertyId: const obx_int.IdUid(4, 8625319659857310688),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5329374772252227906),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8606472576436181012),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6107119431783381616),
            name: 'email',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8625319659857310688),
            name: 'profileImageUrl',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 7815535746756623991),
      name: 'UsersChatMessageEntity',
      lastPropertyId: const obx_int.IdUid(3, 3422250621684663502),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6780552912958917304),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 703644910920525448),
            name: 'sentFromUserId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3422250621684663502),
            name: 'sentToUserId',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(2, 3698727659471119717),
            name: 'messages',
            targetId: const obx_int.IdUid(1, 5105723551177742776))
      ],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(4, 7815535746756623991),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(2, 3698727659471119717),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    MessageEntity: obx_int.EntityDefinition<MessageEntity>(
        model: _entities[0],
        toOneRelations: (MessageEntity object) => [],
        toManyRelations: (MessageEntity object) => {
              obx_int.RelInfo<MessageEntity>.toMany(1, object.id!):
                  object.messageFiles
            },
        getId: (MessageEntity object) => object.id,
        setId: (MessageEntity object, int id) {
          object.id = id;
        },
        objectToFB: (MessageEntity object, fb.Builder fbb) {
          final bodyTextOffset = fbb.writeString(object.bodyText);
          fbb.startTable(9);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addInt64(1, object.sendToUserId);
          fbb.addInt64(2, object.sendFromUserId);
          fbb.addOffset(3, bodyTextOffset);
          fbb.addInt64(4, object.cratedAt.millisecondsSinceEpoch);
          fbb.addBool(5, object.isSent);
          fbb.addBool(6, object.received);
          fbb.addBool(7, object.seen);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final sendToUserIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final sendFromUserIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final bodyTextParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final messageFilesParam = obx.ToMany<MessageFileEntity>();
          final cratedAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final isSentParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 14, false);
          final receivedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 16, false);
          final seenParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 18, false);
          final object = MessageEntity(
              id: idParam,
              sendToUserId: sendToUserIdParam,
              sendFromUserId: sendFromUserIdParam,
              bodyText: bodyTextParam,
              messageFiles: messageFilesParam,
              cratedAt: cratedAtParam,
              isSent: isSentParam,
              received: receivedParam,
              seen: seenParam);
          obx_int.InternalToManyAccess.setRelInfo<MessageEntity>(
              object.messageFiles,
              store,
              obx_int.RelInfo<MessageEntity>.toMany(1, object.id!));
          return object;
        }),
    MessageFileEntity: obx_int.EntityDefinition<MessageFileEntity>(
        model: _entities[1],
        toOneRelations: (MessageFileEntity object) => [],
        toManyRelations: (MessageFileEntity object) => {},
        getId: (MessageFileEntity object) => object.id,
        setId: (MessageFileEntity object, int id) {
          object.id = id;
        },
        objectToFB: (MessageFileEntity object, fb.Builder fbb) {
          final serverSrcOffset = fbb.writeString(object.serverSrc);
          final localStoragePathOffset = object.localStoragePath == null
              ? null
              : fbb.writeString(object.localStoragePath!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, serverSrcOffset);
          fbb.addBool(2, object.downloadedToLocalStorage);
          fbb.addOffset(3, localStoragePathOffset);
          fbb.addInt64(4, object.messageId);
          fbb.addBool(5, object.sentToServer);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final serverSrcParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final downloadedToLocalStorageParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 8, false);
          final localStoragePathParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10);
          final messageIdParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final sentToServerParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 14, false);
          final object = MessageFileEntity(
              id: idParam,
              serverSrc: serverSrcParam,
              downloadedToLocalStorage: downloadedToLocalStorageParam,
              localStoragePath: localStoragePathParam,
              messageId: messageIdParam,
              sentToServer: sentToServerParam);

          return object;
        }),
    UserEntity: obx_int.EntityDefinition<UserEntity>(
        model: _entities[2],
        toOneRelations: (UserEntity object) => [],
        toManyRelations: (UserEntity object) => {},
        getId: (UserEntity object) => object.id,
        setId: (UserEntity object, int id) {
          object.id = id;
        },
        objectToFB: (UserEntity object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final emailOffset = fbb.writeString(object.email);
          final profileImageUrlOffset = object.profileImageUrl == null
              ? null
              : fbb.writeString(object.profileImageUrl!);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, emailOffset);
          fbb.addOffset(3, profileImageUrlOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final profileImageUrlParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10);
          final object = UserEntity(
              id: idParam,
              name: nameParam,
              email: emailParam,
              profileImageUrl: profileImageUrlParam);

          return object;
        }),
    UsersChatMessageEntity: obx_int.EntityDefinition<UsersChatMessageEntity>(
        model: _entities[3],
        toOneRelations: (UsersChatMessageEntity object) => [],
        toManyRelations: (UsersChatMessageEntity object) => {
              obx_int.RelInfo<UsersChatMessageEntity>.toMany(2, object.id):
                  object.messages
            },
        getId: (UsersChatMessageEntity object) => object.id,
        setId: (UsersChatMessageEntity object, int id) {
          object.id = id;
        },
        objectToFB: (UsersChatMessageEntity object, fb.Builder fbb) {
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.sentFromUserId);
          fbb.addInt64(2, object.sentToUserId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final messagesParam = obx.ToMany<MessageEntity>();
          final sentFromUserIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final sentToUserIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final object = UsersChatMessageEntity(
              id: idParam,
              messages: messagesParam,
              sentFromUserId: sentFromUserIdParam,
              sentToUserId: sentToUserIdParam);
          obx_int.InternalToManyAccess.setRelInfo<UsersChatMessageEntity>(
              object.messages,
              store,
              obx_int.RelInfo<UsersChatMessageEntity>.toMany(2, object.id));
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [MessageEntity] entity fields to define ObjectBox queries.
class MessageEntity_ {
  /// See [MessageEntity.id].
  static final id =
      obx.QueryIntegerProperty<MessageEntity>(_entities[0].properties[0]);

  /// See [MessageEntity.sendToUserId].
  static final sendToUserId =
      obx.QueryIntegerProperty<MessageEntity>(_entities[0].properties[1]);

  /// See [MessageEntity.sendFromUserId].
  static final sendFromUserId =
      obx.QueryIntegerProperty<MessageEntity>(_entities[0].properties[2]);

  /// See [MessageEntity.bodyText].
  static final bodyText =
      obx.QueryStringProperty<MessageEntity>(_entities[0].properties[3]);

  /// See [MessageEntity.cratedAt].
  static final cratedAt =
      obx.QueryDateProperty<MessageEntity>(_entities[0].properties[4]);

  /// See [MessageEntity.isSent].
  static final isSent =
      obx.QueryBooleanProperty<MessageEntity>(_entities[0].properties[5]);

  /// See [MessageEntity.received].
  static final received =
      obx.QueryBooleanProperty<MessageEntity>(_entities[0].properties[6]);

  /// See [MessageEntity.seen].
  static final seen =
      obx.QueryBooleanProperty<MessageEntity>(_entities[0].properties[7]);

  /// see [MessageEntity.messageFiles]
  static final messageFiles =
      obx.QueryRelationToMany<MessageEntity, MessageFileEntity>(
          _entities[0].relations[0]);
}

/// [MessageFileEntity] entity fields to define ObjectBox queries.
class MessageFileEntity_ {
  /// See [MessageFileEntity.id].
  static final id =
      obx.QueryIntegerProperty<MessageFileEntity>(_entities[1].properties[0]);

  /// See [MessageFileEntity.serverSrc].
  static final serverSrc =
      obx.QueryStringProperty<MessageFileEntity>(_entities[1].properties[1]);

  /// See [MessageFileEntity.downloadedToLocalStorage].
  static final downloadedToLocalStorage =
      obx.QueryBooleanProperty<MessageFileEntity>(_entities[1].properties[2]);

  /// See [MessageFileEntity.localStoragePath].
  static final localStoragePath =
      obx.QueryStringProperty<MessageFileEntity>(_entities[1].properties[3]);

  /// See [MessageFileEntity.messageId].
  static final messageId =
      obx.QueryIntegerProperty<MessageFileEntity>(_entities[1].properties[4]);

  /// See [MessageFileEntity.sentToServer].
  static final sentToServer =
      obx.QueryBooleanProperty<MessageFileEntity>(_entities[1].properties[5]);
}

/// [UserEntity] entity fields to define ObjectBox queries.
class UserEntity_ {
  /// See [UserEntity.id].
  static final id =
      obx.QueryIntegerProperty<UserEntity>(_entities[2].properties[0]);

  /// See [UserEntity.name].
  static final name =
      obx.QueryStringProperty<UserEntity>(_entities[2].properties[1]);

  /// See [UserEntity.email].
  static final email =
      obx.QueryStringProperty<UserEntity>(_entities[2].properties[2]);

  /// See [UserEntity.profileImageUrl].
  static final profileImageUrl =
      obx.QueryStringProperty<UserEntity>(_entities[2].properties[3]);
}

/// [UsersChatMessageEntity] entity fields to define ObjectBox queries.
class UsersChatMessageEntity_ {
  /// See [UsersChatMessageEntity.id].
  static final id = obx.QueryIntegerProperty<UsersChatMessageEntity>(
      _entities[3].properties[0]);

  /// See [UsersChatMessageEntity.sentFromUserId].
  static final sentFromUserId =
      obx.QueryIntegerProperty<UsersChatMessageEntity>(
          _entities[3].properties[1]);

  /// See [UsersChatMessageEntity.sentToUserId].
  static final sentToUserId = obx.QueryIntegerProperty<UsersChatMessageEntity>(
      _entities[3].properties[2]);

  /// see [UsersChatMessageEntity.messages]
  static final messages =
      obx.QueryRelationToMany<UsersChatMessageEntity, MessageEntity>(
          _entities[3].relations[0]);
}
